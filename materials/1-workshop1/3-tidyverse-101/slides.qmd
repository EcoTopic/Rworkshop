---
title: "Intro to data visualization and data wrangling with the `tidyverse`"
subtitle: "<em>remixed from <a href='https://github.com/wilkelab/SDS375'>Claus O. Wilke's SDS375 course</a></em>"
format: qmdrslides-revealjs
editor_options: 
  chunk_output_type: inline
---

```{r}
#| echo: false
#| warning: false
#| message: false

library(countdown)
library(tidyverse)
library(cowplot)
library(colorspace)
library(here)

align_legend <- function(p, hjust = 0.5)
{
  # extract legend
  g <- cowplot::plot_to_gtable(p)
  grobs <- g$grobs
  legend_index <- which(sapply(grobs, function(x) x$name) == "guide-box")
  legend <- grobs[[legend_index]]

  # extract guides table
  guides_index <- which(sapply(legend$grobs, function(x) x$name) == "layout")

  # there can be multiple guides within one legend box  
  for (gi in guides_index) {
    guides <- legend$grobs[[gi]]
    
    # add extra column for spacing
    # guides$width[5] is the extra spacing from the end of the legend text
    # to the end of the legend title. If we instead distribute it by `hjust:(1-hjust)` on
    # both sides, we get an aligned legend
    spacing <- guides$width[5]
    guides <- gtable::gtable_add_cols(guides, hjust*spacing, 1)
    guides$widths[6] <- (1-hjust)*spacing
    title_index <- guides$layout$name == "title"
    guides$layout$l[title_index] <- 2

    # reconstruct guides and write back
    legend$grobs[[gi]] <- guides
  }
  
  # reconstruct legend and write back
  g$grobs[[legend_index]] <- legend
  g
}


theme_set(theme_cowplot(24) + background_grid())

table_02 <- read_csv(here("datasets/instructional_dataset/02_visit_clinical_measurements_UKZN_workshop_2023.csv"))

```

## {data-menu-title="Website Link" style="text-align: center"}

\
\
\

:::{.r-fit-text}
Workshop materials are at:

[https://elsherbini.github.io/durban-data-science-for-biology/](https://elsherbini.github.io/durban-data-science-for-biology/)
:::

## {data-menu-item="Workshop Goals"}

\
\

### Goals for this session {style="font-size: 2.5em; text-align: center"}

:::{.incremental style="font-size: 1.5em"}
1. Get the big picture of data visualization 

2. Learn how to wrangle data and make plots with the `tidyverse`
:::

::: {.fragment .fade-up}
> data wrangling (n.) - the art of taking data in one format and filtering, reshaping, and deriving values to make the data format you need.
:::


## Discussions: discord

Ask questions at **#workshop-questions** on [https://discord.gg/UDAsYTzZE](https://discord.gg/UDAsYTzZE).

![](images/discord_durban.png){fig-alt="Screenshot of the discord server app that serves as the forum for the workshop." fig-align="center" width="546"}

## Stickies

:::{layout="[[4, 5, 1]]" layout-valign=center}
![](images/sticky.jpeg){fig-alt="Picture of a laptop with a red sticky note stuck to the top." width=540}

During an activity, place a [**yellow**]{style="color: Gold"}  sticky on your laptop if you're good to go and a [**pink**]{style="color: hotpink"} sticky if you want help.
:::

:::footer
Image by [Megan Duffy](https://dynamicecology.wordpress.com/2015/01/13/sticky-notes-as-a-teaching-and-lab-meeting-tool/)
:::


## Practicalities
:::{.r-fit-text}
WiFi:

Network: KTB Free Wifi (no password needed)

Bathrooms are out the lobby to your left

:::

## Group Pen and Paper exercise {.your-turn}

```{r}
#| echo: false
countdown::countdown(10, left=0, right=NULL)
countdown::countdown(30)
```

Get with your group.
Go to [the activity](index.html#data-visualization-activity)

1. For the first 10 minutes think on your own
2. For 30 minutes discuss with your group and produce at least one plot
3. Someone post a picture on the [{{< fa brands discord >}} #pen-and-paper-activity](https://discord.com/channels/1158136582201692202/1160951454417301585) channel.
4. Decide on one member of your group to present your plot (3 minute limit per group)

## Presentation {.your-turn}

Have one member from your group present the plot  to everyone! 3 minute limit!

```{r}
#| echo: false
countdown::countdown(3)
```

# Aesthetics - the elements of data visualization

## Plots map data onto graphical elements.


```{r}
#| echo: false
#| label: tbl-02
#| tbl-cap: "`02_visit_clinical_measurements_UKZN_workshop_2023.csv`"
knitr::kable(head(table_02))

```

## pH mapped to y position

```{r}
table_02 %>%
  ggplot(aes(x = time_point, y=ph)) +
  geom_jitter()

```

## pH mapped to color

```{r}
table_02 %>%
  ggplot(aes(x = time_point, y=pid, color=ph)) +
  geom_point(size=2) +
  theme(axis.text.y = element_blank())

```


## Commonly used aesthetics

![Figure from <a href = 'https://clauswilke.com/dataviz'> Claus O. Wilke. Fundamentals of Data Visualization. O'Reilly, 2019 </a>](images/common-aesthetics-1.png)


## The same data values can be mapped to different aesthetics

![Figure from <a href = 'https://clauswilke.com/dataviz'> Claus O. Wilke. Fundamentals of Data Visualization. O'Reilly, 2019 </a>](images/basic-scales-example-1.png)

## We can use many different aesthetics at once

```{r mtcars-five-scale, echo = FALSE, message = FALSE, fig.width = 5.5, fig.asp = .8, dev = "svg"}
p_mtcars <- ggplot(mtcars, aes(disp, mpg, fill = hp, shape = factor(cyl), size = wt)) + 
  geom_point(color = "white") +
  scale_shape_manual(values = c(23, 24, 21), name = "cylinders") +
  scale_fill_continuous_sequential(
    palette = "Emrld", name = "power (hp)",
    breaks = c(100, 200, 300),
    rev = FALSE
  ) +
  xlab("displacement (cu. in.)") +
  ylab("fuel efficiency (mpg)") +
  guides(
    shape = guide_legend(override.aes = list(size = 4, fill = "#329D84")),
    size = guide_legend(override.aes = list(shape = 21, fill = "#329D84"),
    title = "weight (1000 lbs)")
  ) +
  theme_half_open(14) + background_grid() +
  theme(
    legend.box.background = element_rect(fill = "white", color = "white"),
    legend.position = "top",
    legend.direction = "vertical",
    legend.justification = "center",
    legend.box.margin = margin(7, 7, 7, 7)
  )
legend <- get_legend(align_legend(p_mtcars))
ggdraw() + 
  draw_plot(p_mtcars + theme(legend.position = "none")) + 
  draw_grob(
    legend,
    vjust = 1, hjust = 1, valign = 1, halign = 1,
    x = 1, y = 1, width = .65, height = .3
  )
```


# Creating aesthetic mappings in `ggplot`

## We define the mapping with `aes()`

```{r}
#| echo: fenced
table_02 %>%
  ggplot(mapping = aes(x = time_point, y = ph, color = ph)) +
  geom_jitter()
```


## We frequently omit argument names {auto-animate="true"}

Long form, all arguments are named:

```{r}
#| echo: fenced
#| eval: false

ggplot(
  data= table_02,
  mapping = aes(x = time_point, y = ph, color = ph)
) +
  geom_jitter()

```


## We frequently omit argument names {auto-animate="true"}

Abbreviated form, common arguments remain unnamed:

```{r}
#| echo: fenced
#| eval: false

ggplot(table_02, aes(x = time_point, y = ph, color = ph)) +
  geom_jitter()

```


## The geom determines how the data is shown  {auto-animate="true"}

```{r}
#| echo: fenced
ggplot(table_02, aes(x = time_point, y = ph, color = ph)) +
  geom_point()
```

## The geom determines how the data is shown  {auto-animate="true"}

```{r}
#| echo: fenced
ggplot(table_02, aes(x = time_point, y = ph, color = ph)) +
  geom_boxplot()
```


## The geom determines how the data is shown  {auto-animate="true"}

```{r}
#| echo: fenced
ggplot(table_02, aes(x = time_point, y = ph, color = ph)) +
  geom_jitter()
```

## Different geoms have parameters for control  {auto-animate="true"}

```{r}
#| echo: fenced
ggplot(table_02, aes(x = time_point, y = ph, color = ph)) +
  geom_jitter(size=3)
```


## Different geoms have parameters for control  {auto-animate="true"}

```{r}
#| echo: fenced
ggplot(table_02, aes(x = time_point, y = ph, color = ph)) +
  geom_jitter(size=3, width = 0.2)
```


## Important: `color` and `fill` apply to different elements


`color`<br>
Applies color to points, lines, text, borders


`fill`<br>
Applies color to any filled areas 



## Many geoms have both `color` and `fill` aesthetics {auto-animate="true"}

```{r}
#| echo: fenced
#| output-location: column
ggplot(
  data = table_02,
  mapping = aes(
    x = time_point,
    y = ph,
    color = time_point
  )
) + geom_boxplot()
```

## Many geoms have both `color` and `fill` aesthetics {auto-animate="true"}

```{r}
#| echo: fenced
#| output-location: column
ggplot(
  data = table_02,
  mapping = aes(
    x = time_point,
    y = ph,
    fill = time_point
  )
) + geom_boxplot()
```

## Many geoms have both `color` and `fill` aesthetics {auto-animate="true"}

```{r}
#| echo: fenced
#| output-location: column
ggplot(
  data = table_02,
  mapping = aes(
    x = time_point,
    y = ph,
    fill = time_point,
    color = time_point
  )
) + geom_boxplot()
```

## Aesthetics can also be used as parameters in geoms {auto-animate="true"}

```{r}
#| echo: fenced
#| output-location: column
ggplot(
  data = table_02,
  mapping = aes(
    x = time_point,
    y = ph
  )
) + geom_boxplot()
```

## Aesthetics can also be used as parameters in geoms {auto-animate="true"}

```{r}
#| echo: fenced
#| output-location: column
ggplot(
  data = table_02,
  mapping = aes(
    x = time_point,
    y = ph
  )
) + geom_boxplot(fill="orange")
```

## Exercise {.your-turn}

```{r}
#| echo: false

countdown(30)

```

Time to try it yourself. Go to [the first coding exercise](index.html#coding-exercise-3.1).

![](images/sticky.jpeg){fig-alt="Picture of a laptop with a red sticky note stuck to the top." width=540}

During an activity, place a [**blue**]{style="color: DarkTurquoise"}  sticky on your laptop if you're good to go and a [**pink**]{style="color: hotpink"} sticky if you want help.


---

---
:::{style="text-align:center"}
{{< fa clone size=5x >}}
:::

# Visualizing amounts

## We often encounter datasets containing simple amounts

Example: Highest grossing movies 2023 to date




```{r}
#|echo: false
# Data from Box Office Mojo for 2023. 
boxoffice <- tibble(
  rank = 1:5,
  title = c("Barbie", "The Super Mario Bros Movie", "Oppenheimer", "Guardians of the Galaxy 3", "The Little Mermaid"),
  amount = c(1437.8, 1361.9, 939.3, 845.5, 569.6) # million USD
)

boxoffice %>%
  knitr::kable("html")
```


[Millions USD. Data source: [Box Office Mojo](https://www.boxofficemojo.com/year/world/)]{style="font-size: 0.5em"}



## We can visualize amounts with bar plots


```{r boxoffice-horizontal}
#| echo: false
boxoffice %>%
  ggplot(aes(x = fct_reorder(title, rank), y = amount)) +
    geom_col(fill = "#56B4E9", width = 0.6, alpha = 0.9) +
    scale_y_continuous(
      expand = c(0, 0),
      breaks = c(0, 250, 500, 750, 1000, 1250),
      name = "YTD gross (million USD)"
    ) +
    scale_x_discrete(
      name = NULL,
      expand = c(0, 0.4)
    ) +
    coord_cartesian(clip = "off") +
    theme_minimal_hgrid(12, rel_small = 1) +
    theme(
      axis.line.x = element_blank(),
      axis.ticks.x = element_blank()
    )

```


## Bars can also run horizontally

```{r}
#| echo: false

ggplot(boxoffice, aes(x = fct_reorder(title, desc(rank)), y = amount)) +
  geom_col(fill = "#56B4E9", alpha = 0.9) +
  scale_y_continuous(
    limits = c(0, 1750),
    expand = c(0, 0),
      breaks = c(0, 250, 500, 750, 1000, 1250),
    name = "YTD gross (million USD)"
  ) +
  scale_x_discrete(
    name = NULL,
    expand = c(0, 0.5)
  ) +
  coord_flip(clip = "off") +
  theme_minimal_vgrid(rel_small = 1) +
  theme(
    axis.line.y = element_blank(),
    axis.ticks.y = element_blank()
  )

```

## Avoid rotated axis labels


```{r}
#| echo: false

p_box_axrot <- boxoffice %>%
  ggplot(aes(x = fct_reorder(title, rank), y = amount)) +
    geom_col(fill = "#56B4E9", width = 0.6, alpha = 0.9) +
    scale_y_continuous(
      expand = c(0, 0),
      breaks = c(0, 250, 500, 750, 1000, 1250),
      name = "YTD gross (million USD)"
    ) +
    scale_x_discrete(
      name = NULL,
      expand = c(0, 0.4)
    ) +
    coord_cartesian(clip = "off") +
    theme_minimal_hgrid(12, rel_small = 1) +
    theme(
      axis.line.x = element_blank(),
      axis.ticks.x = element_blank(),
      axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),
      plot.margin = margin(3, 7, 3, 1.5)
    )

stamp_bad(p_box_axrot)
```

## Avoid rotated axis labels - flip the axes!


```{r}
#| echo: false

ggplot(boxoffice, aes(x = fct_reorder(title, desc(rank)), y = amount)) +
  geom_col(fill = "#56B4E9", alpha = 0.9) +
  scale_y_continuous(
    limits = c(0, 1750),
    expand = c(0, 0),
      breaks = c(0, 250, 500, 750, 1000, 1250),
    name = "YTD gross (million USD)"
  ) +
  scale_x_discrete(
    name = NULL,
    expand = c(0, 0.5)
  ) +
  coord_flip(clip = "off") +
  theme_minimal_vgrid(rel_small = 1) +
  theme(
    axis.line.y = element_blank(),
    axis.ticks.y = element_blank()
  )

```

## Pay attention to the order of the bars

```{r}
#| echo: false

p_box_noorder <- ggplot(boxoffice, aes(x = factor(title, levels = title[c(2, 1, 5, 3, 4)]), y = amount)) +
  geom_col(fill = "#56B4E9", alpha = 0.9) +
  scale_y_continuous(
    limits = c(0, 1750),
    expand = c(0, 0),
      breaks = c(0, 250, 500, 750, 1000, 1250),
    name = "YTD gross (million USD)"
  ) +
  scale_x_discrete(
    name = NULL,
    expand = c(0, 0.5)
  ) +
  coord_flip(clip = "off") +
  theme_minimal_vgrid(rel_small = 1) +
  theme(
    axis.line.y = element_blank(),
    axis.ticks.y = element_blank()
  )

stamp_bad(p_box_noorder)
```


## Pay attention to the order of the bars

```{r}
ggplot(boxoffice, aes(x = fct_reorder(title, desc(rank)), y = amount)) +
  geom_col(fill = "#56B4E9", alpha = 0.9) +
  scale_y_continuous(
    limits = c(0, 1750),
    expand = c(0, 0),
      breaks = c(0, 250, 500, 750, 1000, 1250),
    name = "YTD gross (million USD)"
  ) +
  scale_x_discrete(
    name = NULL,
    expand = c(0, 0.5)
  ) +
  coord_flip(clip = "off") +
  theme_minimal_vgrid(rel_small = 1) +
  theme(
    axis.line.y = element_blank(),
    axis.ticks.y = element_blank()
  )
```
## We can use dots instead of bars

```{r}
ggplot(boxoffice, aes(x = fct_reorder(title, desc(rank)), y = amount)) +
  geom_point(color = "#0072B2", size = 4) +
  scale_y_continuous(
    limits = c(0, 1750),
    expand = c(0, 0),
      breaks = c(0, 250, 500, 750, 1000, 1250),
    name = "YTD gross (million USD)"
  ) +
  scale_x_discrete(
    name = NULL,
    expand = c(0, 0.5)
  ) +
  coord_flip(clip = "off") +
  theme_minimal_vgrid(rel_small = 1) +
  theme(
    axis.line.y = element_blank(),
    axis.ticks.y = element_blank()
  )
```


## Dots are preferable if we want to truncate the axes

```{r Americas-life-expect, echo = FALSE, fig.width = 6., fig.asp = .9, dev = "svg"}
library(gapminder)

df_Americas <- gapminder %>% filter(year == 2007, continent == "Americas")

ggplot(df_Americas, aes(x = lifeExp, y = fct_reorder(country, lifeExp))) +
  geom_point(color = "#0072B2", size = 3) +
  scale_x_continuous(
    name = "life expectancy (years)",
    limits = c(59.7, 81.5),
    expand = c(0, 0)
  ) +
  scale_y_discrete(name = NULL, expand = c(0, 0.5)) +
  theme_minimal_grid(12, rel_small = 1) +
  theme(
    plot.margin = margin(18, 6, 3, 1.5)
  )
```

## Dots are preferable if we want to truncate the axes

```{r Americas-life-expect-bad1, echo = FALSE, fig.width = 6., fig.asp = .9, dev = "svg"}
p <- ggplot(df_Americas, aes(x = lifeExp, y = fct_reorder(country, lifeExp))) +
  geom_col(fill = "#56B4E9", alpha = 0.9) +
  scale_x_continuous(
    name = "life expectancy (years)",
    expand = c(0, 0)
  ) +
  scale_y_discrete(name = NULL, expand = c(0, 0.5)) +
  coord_cartesian(xlim = c(59.7, 81.5)) +
  theme_minimal_grid(12, rel_small = 1) +
  theme(
    plot.margin = margin(18, 6, 3, 1.5)
  )

stamp_bad(p)
```

[bar lengths do not accurately represent the data values]{style="font-size: 0.5em"}

## Dots are preferable if we want to truncate the axes

```{r Americas-life-expect-bad2, echo = FALSE, fig.width = 6., fig.asp = .9, dev = "svg"}
p <- ggplot(df_Americas, aes(x = lifeExp, y = fct_reorder(country, lifeExp))) +
  geom_col(fill = "#56B4E9", alpha = 0.9) +
  scale_x_continuous(
    name = "life expectancy (years)",
    expand = c(0, 0)
  ) +
  scale_y_discrete(name = NULL, expand = c(0, 0.5)) +
  coord_cartesian(xlim = c(0, 85)) +
  theme_minimal_grid(12, rel_small = 1) +
  theme(
    plot.margin = margin(18, 6, 3, 1.5)
  )

stamp_bad(p)
```

[key features of the data are obscured]{style="font-size: 0.5em"}

## Dots are preferable if we want to truncate the axes


```{r Americas-life-expect2, echo = FALSE, fig.width = 6., fig.asp = .9, dev = "svg"}
library(gapminder)

df_Americas <- gapminder %>% filter(year == 2007, continent == "Americas")

ggplot(df_Americas, aes(x = lifeExp, y = fct_reorder(country, lifeExp))) +
  geom_point(color = "#0072B2", size = 3) +
  scale_x_continuous(
    name = "life expectancy (years)",
    limits = c(59.7, 81.5),
    expand = c(0, 0)
  ) +
  scale_y_discrete(name = NULL, expand = c(0, 0.5)) +
  theme_minimal_grid(12, rel_small = 1) +
  theme(
    plot.margin = margin(18, 6, 3, 1.5)
  )
```

## Let's take a poll {.your-turn}

Go to [the event on wooclap](https://app.wooclap.com/DURBAN?from=event-page)  

![](../../../images/wooclap_info.png)

[M3. Do you think it makes sense to truncate the axes for the life expectancy data?]{style="font-size: 0.9em"}

# Grouped bars

## We use grouped bars for higher-dimensional datasets

```{r}
#| echo: false
table_01 <- read_csv(here("datasets/instructional_dataset/01_participant_metadata_UKZN_workshop_2023.csv"))

table_02 <- read_csv(here("datasets/instructional_dataset/02_visit_clinical_measurements_UKZN_workshop_2023.csv"))

left_join(table_01, table_02) %>%
  group_by(time_point, smoker) %>%
  summarise(crp_blood = median(crp_blood)) %>%
  ggplot(aes(x=time_point, y=crp_blood, fill=smoker)) +
  geom_col(position = "dodge", alpha=0.9) +
  scale_y_continuous(expand=c(0,0), name = "C-reactive protein (median)")
```

## We are free to choose by which variable to group
```{r}
left_join(table_01, table_02) %>%
  group_by(time_point, smoker) %>%
  summarise(crp_blood = median(crp_blood)) %>%
  ggplot(aes(x=smoker, y=crp_blood, fill=time_point)) +
  geom_col(position = "dodge", alpha=0.9) +
  scale_y_continuous(expand=c(0,0), name = "C-reactive protein (median)")
```


## We can also use multiple plot panels (facets)

```{r}
left_join(table_01, table_02) %>%
  group_by(time_point, smoker) %>%
  summarise(crp_blood = median(crp_blood)) %>%
  ggplot(aes(x=time_point, y=crp_blood,)) +
  geom_col(position = "dodge", alpha=0.9, fill = "#0072B2") +
  scale_y_continuous(name = "C-reactive protein (median)") + 
  facet_wrap(~smoker)
```

# Making bar plots using `ggplot2`

## The simple dataset

```{r}
#| echo: true
# Data from Box Office Mojo for 2023. 
boxoffice <- tibble(
  rank = 1:5,
  title = c("Barbie", "The Super Mario Bros Movie", "Oppenheimer", "Guardians of the Galaxy 3", "The Little Mermaid"),
  amount = c(1437.8, 1361.9, 939.3, 845.5, 569.6) # million USD
)
```

```{r}
#| echo: false
boxoffice %>%
  knitr::kable("html")
```

## Visualize as a bar plot {auto-animate="true"}

```{r}
#| echo: true
ggplot(boxoffice, aes(title, amount)) +
  geom_col()  # "col" stands for column
```

## Order by data value {auto-animate="true"}

```{r}
#| echo: true
ggplot(boxoffice, aes(fct_reorder(title, amount), amount)) +
  geom_col()
```


## Order by data value, descending {auto-animate="true"}

```{r}
#| echo: true
ggplot(boxoffice, aes(fct_reorder(title, -amount), amount)) +
  geom_col() + 
  xlab(NULL) # remove x axis label
```

## Flip x and y, set custom x axis label

```{r}
#| echo: true
ggplot(boxoffice, aes(amount, fct_reorder(title, amount))) +
  geom_col() +
  xlab("amount (in million USD)") +
  ylab(NULL)
```


## Sometimes we need to count before visualization

```{r}
#| echo: true
library(here)
library(tidyverse)

table_02 <- read_csv(here("datasets/instructional_dataset/02_visit_clinical_measurements_UKZN_workshop_2023.csv")) %>%
  mutate(nugent_score = as_factor(nugent_score))

```

```{r}
#| echo: false
table_02 %>%
  knitr::kable("html")
```

## Goal: Visualize number of people with different nugent scores

## Use `geom_bar()` to count before plotting {auto-animate="true"}

```{r}
#| echo: true
table_02 %>%
  ggplot(aes(y=nugent_score))+
  geom_bar()
```

## Getting the bars into the right order {auto-animate="true"}

```{r}
#| echo: true
table_01 %>%
  ggplot(aes(y=education))+
  geom_bar()
```

## Getting the bars into the right order {auto-animate="true"}

```{r}
#| echo: true
education_order <- c("less than grade 9","grade 10-12, not matriculated","grade 10-12, matriculated","post-secondary")
table_01 %>%
  mutate(education = fct_relevel(education, education_order)) %>%
  ggplot(aes(y=education))+
  geom_bar()
```

## Display counts by smoking and education {auto-animate="true"}

```{r}
#| echo: true
table_01 %>%
  mutate(education = fct_relevel(education, education_order)) %>%
  ggplot(aes(y=education, fill=smoker))+
  geom_bar()
```


## Positions define how subgroups are shown {auto-animate="true"}

`position = "dodge"`: Place bars for subgroups side-by-side

```{r}
#| echo: true
table_01 %>%
  mutate(education = fct_relevel(education, education_order)) %>%
  ggplot(aes(y=education, fill=smoker))+
  geom_bar(position = "dodge")
```

## Positions define how subgroups are shown {auto-animate="true"}

`position = "stack"`: Place bars for subgroups on top of each other

```{r}
#| echo: true
table_01 %>%
  mutate(education = fct_relevel(education, education_order)) %>%
  ggplot(aes(y=education, fill=smoker))+
  geom_bar(position = "stack")
```

## Positions define how subgroups are shown {auto-animate="true"}

`position = "fill"`: Like `"stack"`, but scale to 100%

```{r}
#| echo: true
table_01 %>%
  mutate(education = fct_relevel(education, education_order)) %>%
  ggplot(aes(y=education, fill=smoker))+
  geom_bar(position = "fill")
```


## Let's take a poll {.your-turn}

Go to [the event on wooclap](https://app.wooclap.com/DURBAN?from=event-page)  

![](../../../images/wooclap_info.png)

[2 questions: M3. What's the difference between geom_col and geom_bar? and M3. What patterns did you see in the smoker CRP data (slide 49)?]{style="font-size: 0.9em"}


## Exercise {.your-turn}

```{r}
#| echo: false

countdown(30)

```

Time to try it yourself. Go to [the second coding exercise](index.html#coding-exercise-3.2).

![](images/sticky.jpeg){fig-alt="Picture of a laptop with a red sticky note stuck to the top." width=540}

During an activity, place a [**blue**]{style="color: DarkTurquoise"}  sticky on your laptop if you're good to go and a [**pink**]{style="color: hotpink"} sticky if you want help.