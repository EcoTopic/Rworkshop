{
  "hash": "b296bda176a6a92d69d77e6c1b1b2476",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Introduction to R\nauthor: Data Carpentry contributors\nminutes: 45\n---\n\n::: {.cell}\n\n:::\n\n\n***\n::::::::::::::::::::::::::::::::::::::: questions\n\n- How do you create objects in R? \n- How do you save R code for later use? \n- How do you manipulate data in R?\n\n::::::::::::::::::::::::::::::::::::::::::::::::::\n\n:::::::::::::::::::::::::::::::::::::: objectives\n\n- Define the following terms as they relate to R: object, assign, call,\n  function, arguments, options.\n- Create objects and assign values to them  in R.\n- Learn how to *name* objects.\n- Save a script file for later use.\n- Use comments to inform script.\n- Solve simple arithmetic operations in R.\n- Call functions and use arguments to change their default options.\n- Inspect the content of vectors and manipulate their content.\n- Subset and extract values from vectors.\n- Analyze vectors with missing data.\n\n::::::::::::::::::::::::::::::::::::::::::::::::::\n\n***\n\n## Creating objects in R\n\n\n::: {.cell}\n\n:::\n\n\nYou can get output from R simply by typing math in the console:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n3 + 5\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 8\n```\n\n\n:::\n\n```{.r .cell-code}\n12 / 7\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1.714286\n```\n\n\n:::\n:::\n\n\nHowever, to do useful and interesting things, we need to assign *values* to\n*objects*. To create an object, we need to give it a name followed by the\nassignment operator `<-`, and the value we want to give it:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nweight_kg <- 55\n```\n:::\n\n\n`<-` is the assignment operator we will use in this course. It assigns values on the right to objects on\nthe left. So, after executing `x <- 3`, the value of `x` is `3`.   For historical reasons, you can also use `=`\nfor assignments, but not in every context. Because of the\n[slight](https://blog.revolutionanalytics.com/2008/12/use-equals-or-arrow-for-assignment.html)\n[differences](https://renkun.me/2014/01/28/difference-between-assignment-operators-in-r/)\nin syntax, it is good practice to always use `<-` for assignments.\n\nIn RStudio, typing <kbd>Alt</kbd> + <kbd>\\-</kbd> (push <kbd>Alt</kbd> at the\nsame time as the <kbd>\\-</kbd> key) will write `<-` in a single keystroke in a PC, while typing <kbd>Option</kbd> + <kbd>\\-</kbd> (push <kbd>Option</kbd> at the\nsame time as the <kbd>\\-</kbd> key) does the same in a Mac.\n\nObjects can be given almost any name such as `x`, `current_temperature`, or `subject_id`. Here are some further guidelines on naming objects:\n\n- You want your object names to be explicit and not too long.\n- They cannot start with a number (`2x` is not valid, but `x2` is).\n- R is case sensitive, so for example, `weight_kg` is different from `Weight_kg`.\n- There are some names that cannot be used because they are the names of fundamental functions in R (e.g., `if`, `else`, `for`, see\n  [here](https://stat.ethz.ch/R-manual/R-devel/library/base/html/Reserved.html)\n  for a complete list). In general, even if it's allowed, it's best to not use\n  other function names (e.g., `c`, `T`, `mean`, `data`, `df`, `weights`). If in\n  doubt, check the help to see if the name is already in use.\n- It's best to avoid dots (`.`) within names. Many function names in R itself have them and dots also have a special meaning (methods) in R and other programming languages. To avoid confusion, don't include dots in names.\n- It is recommended to use nouns for object names and verbs for function names.\n- Be consistent in the styling of your code, such as where you put spaces, how you name objects, etc. Styles can include \"lower\\_snake\", \"UPPER\\_SNAKE\", \"lowerCamelCase\", \"UpperCamelCase\", etc. Using a consistent coding style makes your code clearer to read for your future self and your collaborators. In R, three popular style guides come from [Google](https://google.github.io/styleguide/Rguide.xml), [Jean\n  Fan](https://jef.works/R-style-guide/) and the\n  [tidyverse](https://style.tidyverse.org/). The tidyverse style is very comprehensive and may seem overwhelming at first. You can install the [**`lintr`**](https://github.com/jimhester/lintr) package to automatically check for issues in the styling of your code.\n\n:::::::::::::::::::::::::::::::::::::::::  callout\n\n### Objects vs. variables\n\nWhat are known as `objects` in `R` are known as `variables` in many other\nprogramming languages. Depending on the context, `object` and `variable` can\nhave drastically different meanings. However, in this lesson, the two words\nare used synonymously. For more information see:\n[https://cran.r-project.org/doc/manuals/r-release/R-lang.html#Objects](https://cran.r-project.org/doc/manuals/r-release/R-lang.html#Objects)\n\n::::::::::::::::::::::::::::::::::::::::::::::::::\n\nWhen assigning a value to an object, R does not print anything. You can force R to print the value by using parentheses or by typing the object name:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nweight_kg <- 55    # doesn't print anything\n(weight_kg <- 55)  # but putting parenthesis around the call prints the value of `weight_kg`\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 55\n```\n\n\n:::\n\n```{.r .cell-code}\nweight_kg          # and so does typing the name of the object\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 55\n```\n\n\n:::\n:::\n\n\nNow that R has `weight_kg` in memory, we can do arithmetic with it. For\ninstance, we may want to convert this weight into pounds (weight in pounds is 2.2 times the weight in kg):\n\n\n::: {.cell}\n\n```{.r .cell-code}\n2.2 * weight_kg\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 121\n```\n\n\n:::\n:::\n\n\nWe can also change an object's value by assigning it a new one:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nweight_kg <- 57.5\n2.2 * weight_kg\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 126.5\n```\n\n\n:::\n:::\n\n\nThis means that assigning a value to one object does not change the values of\nother objects. For example, let's store the animal's weight in pounds in a new\nobject, `weight_lb`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nweight_lb <- 2.2 * weight_kg\n```\n:::\n\n\nand then change `weight_kg` to 100.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nweight_kg <- 100\n```\n:::\n\n\nWhat do you think is the current content of the object `weight_lb`? 126.5 or 220?\n\n### Saving your code\n\nUp to now, your code has been in the console. This is useful for quick queries\nbut not so helpful if you want to revisit your work for any reason.\nA script can be opened by pressing <kbd>Ctrl</kbd> + <kbd>Shift</kbd> +\n<kbd>N</kbd>.\nIt is wise to save your script file immediately. To do this press\n<kbd>Ctrl</kbd> + <kbd>S</kbd>. This will open a dialogue box where you\ncan decide where to save your script file, and what to name it.\nThe `.R` file extension is added automatically and ensures your file\nwill open with RStudio.\n\nDon't forget to save your work periodically by pressing <kbd>Ctrl</kbd> +\n<kbd>S</kbd>.\n\n### Comments\n\nThe comment character in R is `#`.  Anything to the right of a `#` in a script\nwill be ignored by R. It is useful to leave notes and explanations in your\nscripts.\nFor convenience, RStudio provides a keyboard shortcut to comment or uncomment a paragraph: after selecting the\nlines you  want to comment, press at the same time on your keyboard\n<kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>C</kbd>. If you only want to comment\nout one line, you can put the cursor at any location of that line (i.e. no need\nto select the whole line), then press <kbd>Ctrl</kbd> + <kbd>Shift</kbd> +\n<kbd>C</kbd>.\n\n:::::::::::::::::::::::::::::::::::::::  challenge\n\n### Challenge\n\nWhat are the values after each statement in the following?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmass <- 47.5            # mass?\nage  <- 122             # age?\nmass <- mass * 2.0      # mass?\nage  <- age - 20        # age?\nmass_index <- mass/age  # mass_index?\n```\n:::\n\n\n::::::::::::::::::::::::::::::::::::::::::::::::::\n\n\n::: {.cell}\n\n:::\n\n\n### Functions and their arguments\n\nFunctions are \"canned scripts\" that automate more complicated sets of commands\nincluding operations assignments, etc. Many functions are predefined, or can be\nmade available by importing R *packages* (more on that later). A function\nusually takes one or more inputs called *arguments*. Functions often (but not\nalways) return a *value*. A typical example would be the function `sqrt()`. The\ninput (the argument) must be a number, and the return value (in fact, the\noutput) is the square root of that number. Executing a function ('running it')\nis called *calling* the function. An example of a function call is:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nweight_kg <- sqrt(10)\n```\n:::\n\n\nHere, the value of 10 is given to the `sqrt()` function, the `sqrt()` function\ncalculates the square root, and returns the value which is then assigned to\nthe object `weight_kg`. This function takes one argument, other functions might take several.\n\nThe return 'value' of a function need not be numerical (like that of `sqrt()`),\nand it also does not need to be a single item: it can be a set of things, or\neven a dataset. We'll see that when we read data files into R.\n\nArguments can be anything, not only numbers or filenames, but also other\nobjects. Exactly what each argument means differs per function, and must be\nlooked up in the documentation (see below). Some functions take arguments which\nmay either be specified by the user, or, if left out, take on a *default* value:\nthese are called *options*. Options are typically used to alter the way the\nfunction operates, such as whether it ignores 'bad values', or what symbol to\nuse in a plot.  However, if you want something specific, you can specify a value\nof your choice which will be used instead of the default.\n\nLet's try a function that can take multiple arguments: `round()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nround(3.14159)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n:::\n\n\nHere, we've called `round()` with just one argument, `3.14159`, and it has\nreturned the value `3`.  That's because the default is to round to the nearest\nwhole number. If we want more digits we can see how to do that by getting\ninformation about the `round` function.  We can use `args(round)` to find what\narguments it takes, or look at the\nhelp for this function using `?round`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nargs(round)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nfunction (x, digits = 0) \nNULL\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n?round\n```\n:::\n\n\nWe see that if we want a different number of digits, we can\ntype `digits = 2` or however many we want.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nround(3.14159, digits = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3.14\n```\n\n\n:::\n:::\n\n\nIf you provide the arguments in the exact same order as they are defined you\ndon't have to name them:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nround(3.14159, 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3.14\n```\n\n\n:::\n:::\n\n\nAnd if you do name the arguments, you can switch their order:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nround(digits = 2, x = 3.14159)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3.14\n```\n\n\n:::\n:::\n\n\nIt's good practice to put the non-optional arguments (like the number you're\nrounding) first in your function call, and to then specify the names of all optional\narguments.  If you don't, someone reading your code might have to look up the\ndefinition of a function with unfamiliar arguments to understand what you're\ndoing.\n\n## Vectors and data types\n\n\n::: {.cell}\n\n:::\n\n\nA vector is the most common and basic data type in R, and is pretty much\nthe workhorse of R. A vector is composed by a series of values, which can be\neither numbers or characters. We can assign a series of values to a vector using\nthe `c()` function. For example we can create a vector of animal weights and assign\nit to a new object `weight_g`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nweight_g <- c(50, 60, 65, 82)\nweight_g\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 50 60 65 82\n```\n\n\n:::\n:::\n\n\nA vector can also contain characters:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nanimals <- c(\"mouse\", \"rat\", \"dog\")\nanimals\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"mouse\" \"rat\"   \"dog\"  \n```\n\n\n:::\n:::\n\n\nThe quotes around \"mouse\", \"rat\", etc. are essential here. Without the quotes R\nwill assume objects have been created called `mouse`, `rat` and `dog`. As these objects\ndon't exist in R's memory, there will be an error message.\n\nThere are many functions that allow you to inspect the content of a\nvector. `length()` tells you how many elements are in a particular vector:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlength(weight_g)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4\n```\n\n\n:::\n\n```{.r .cell-code}\nlength(animals)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n:::\n\n\nAn important feature of a vector, is that all of the elements are the same type of data.\nThe function `class()` indicates what kind of object you are working with:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(weight_g)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"numeric\"\n```\n\n\n:::\n\n```{.r .cell-code}\nclass(animals)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n:::\n\n\nThe function `str()` provides an overview of the structure of an object and its\nelements. It is a useful function when working with large and complex\nobjects:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(weight_g)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n num [1:4] 50 60 65 82\n```\n\n\n:::\n\n```{.r .cell-code}\nstr(animals)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n chr [1:3] \"mouse\" \"rat\" \"dog\"\n```\n\n\n:::\n:::\n\n\nYou can use the `c()` function to add other elements to your vector:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nweight_g <- c(weight_g, 90) # add to the end of the vector\nweight_g <- c(30, weight_g) # add to the beginning of the vector\nweight_g\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 30 50 60 65 82 90\n```\n\n\n:::\n:::\n\n\nIn the first line, we take the original vector `weight_g`,\nadd the value `90` to the end of it, and save the result back into\n`weight_g`. Then we add the value `30` to the beginning, again saving the result\nback into `weight_g`.\n\nWe can do this over and over again to grow a vector, or assemble a dataset.\nAs we program, this may be useful to add results that we are collecting or\ncalculating.\n\nAn **atomic vector** is the simplest R **data type** and is a linear vector of a single type. Above, we saw\n2 of the 6 main **atomic vector** types  that R\nuses: `\"character\"` and `\"numeric\"` (or `\"double\"`). These are the basic building blocks that\nall R objects are built from. The other 4 **atomic vector** types are:\n\n- `\"logical\"` for `TRUE` and `FALSE` (the boolean data type)\n- `\"integer\"` for integer numbers (e.g., `2L`, the `L` indicates to R that it's an integer)\n- `\"complex\"` to represent complex numbers with real and imaginary parts (e.g.,\n  `1 + 4i`) and that's all we're going to say about them\n- `\"raw\"` for bitstreams that we won't discuss further\n\nYou can check the type of your vector using the `typeof()` function and inputting your vector as the argument.\n\nVectors are one of the many **data structures** that R uses. Other important\nones are lists (`list`), matrices (`matrix`), data frames (`data.frame`),\nfactors (`factor`) and arrays (`array`).\n\n:::::::::::::::::::::::::::::::::::::::  challenge\n\n### Challenge\n\n- We've seen that atomic vectors can be of type character,\n  numeric (or double), integer, and logical. But what happens if we try to mix these types in\n  a single vector?\n\n::::::: solution\n\nR implicitly converts them to all be the same type\n\n::::::::::::::::\n\n- What will happen in each of these examples? (hint: use `class()`\n  to check the data type of your objects):\n  \n  ```r\n  num_char <- c(1, 2, 3, \"a\")\n  num_logical <- c(1, 2, 3, TRUE)\n  char_logical <- c(\"a\", \"b\", \"c\", TRUE)\n  tricky <- c(1, 2, 3, \"4\")\n  ```\n\n- Why do you think it happens?\n\n::::::: solution\n\nVectors can be of only one data type. R tries to\nconvert (coerce) the content of this vector to find a \"common\ndenominator\" that doesn't lose any information.\n\n::::::::::::::::\n\n- How many values in `combined_logical` are `\"TRUE\"` (as a character) in the\n  following example (reusing the 2 `..._logical`s from above):\n  \n  ```r\n  combined_logical <- c(num_logical, char_logical)\n  ```\n\n::::::: solution\n\nOnly one. There is no memory of past data types, and the coercion happens the\nfirst time the vector is evaluated. Therefore, the `TRUE` in `num_logical`\ngets converted into a `1` before it gets converted into `\"1\"` in\n`combined_logical`.\n\n::::::::::::::::\n\n- You've probably noticed that objects of different types get\n  converted into a single, shared type within a vector. In R, we\n  call converting objects from one class into another class\n  *coercion*. These conversions happen according to a hierarchy,\n  whereby some types get preferentially coerced into other\n  types. Can you draw a diagram that represents the hierarchy of how\n  these data types are coerced?\n\n::::::: solution\n\nlogical → numeric → character ← logical\n\n::::::::::::::::\n\n::::::::::::::::::::::::::::::::::::::::::::::::::\n\n\n::: {.cell}\n\n:::\n\n\n## Subsetting vectors\n\nIf we want to extract one or several values from a vector, we must provide one\nor several indices in square brackets. For instance:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nanimals <- c(\"mouse\", \"rat\", \"dog\", \"cat\")\nanimals[2]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"rat\"\n```\n\n\n:::\n\n```{.r .cell-code}\nanimals[c(3, 2)]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"dog\" \"rat\"\n```\n\n\n:::\n:::\n\n\nWe can also repeat the indices to create an object with more elements than the\noriginal one:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmore_animals <- animals[c(1, 2, 3, 2, 1, 4)]\nmore_animals\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"mouse\" \"rat\"   \"dog\"   \"rat\"   \"mouse\" \"cat\"  \n```\n\n\n:::\n:::\n\n\nR indices start at 1. Programming languages like Fortran, MATLAB, Julia, and R start\ncounting at 1, because that's what human beings typically do. Languages in the C\nfamily (including C++, Java, Perl, and Python) count from 0 because that's\nsimpler for computers to do.\n\n### Conditional subsetting\n\nAnother common way of subsetting is by using a logical vector. `TRUE` will\nselect the element with the same index, while `FALSE` will not:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nweight_g <- c(21, 34, 39, 54, 55)\nweight_g[c(TRUE, FALSE, FALSE, TRUE, TRUE)]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 21 54 55\n```\n\n\n:::\n:::\n\n\nTypically, these logical vectors are not typed by hand, but are the output of\nother functions or logical tests. For instance, if you wanted to select only the\nvalues above 50:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nweight_g > 50    # will return logicals with TRUE for the indices that meet the condition\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE FALSE FALSE  TRUE  TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\n## so we can use this to select only the values above 50\nweight_g[weight_g > 50]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 54 55\n```\n\n\n:::\n:::\n\n\nYou can combine multiple tests using `&` (both conditions are true, AND) or `|`\n(at least one of the conditions is true, OR):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nweight_g[weight_g > 30 & weight_g < 50]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 34 39\n```\n\n\n:::\n\n```{.r .cell-code}\nweight_g[weight_g <= 30 | weight_g == 55]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 21 55\n```\n\n\n:::\n\n```{.r .cell-code}\nweight_g[weight_g >= 30 & weight_g == 21]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nnumeric(0)\n```\n\n\n:::\n:::\n\n\nHere, `>` for \"greater than\", `<` stands for \"less than\", `<=` for \"less than\nor equal to\", and `==` for \"equal to\". The double equal sign `==` is a test for\nnumerical equality between the left and right hand sides, and should not be\nconfused with the single `=` sign, which performs variable assignment (similar\nto `<-`).\n\nA common task is to search for certain strings in a vector.  One could use the\n\"or\" operator `|` to test for equality to multiple values, but this can quickly\nbecome tedious. The function `%in%` allows you to test if any of the elements of\na search vector are found:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nanimals <- c(\"mouse\", \"rat\", \"dog\", \"cat\", \"cat\")\n\n# return both rat and cat\nanimals[animals == \"cat\" | animals == \"rat\"]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"rat\" \"cat\" \"cat\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# return a logical vector that is TRUE for the elements within animals\n# that are found in the character vector and FALSE for those that are not\nanimals %in% c(\"rat\", \"cat\", \"dog\", \"duck\", \"goat\", \"bird\", \"fish\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE  TRUE  TRUE  TRUE  TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\n# use the logical vector created by %in% to return elements from animals\n# that are found in the character vector\nanimals[animals %in% c(\"rat\", \"cat\", \"dog\", \"duck\", \"goat\", \"bird\", \"fish\")]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"rat\" \"dog\" \"cat\" \"cat\"\n```\n\n\n:::\n:::\n\n\n:::::::::::::::::::::::::::::::::::::::  challenge\n\n### Challenge (optional){.challenge}\n\n- Can you figure out why `\"four\" > \"five\"` returns `TRUE`?\n\n::::::: solution\n\nWhen using \">\" or \"\\<\" on strings, R compares their alphabetical order.\nHere \"four\" comes after \"five\", and therefore is \"greater than\" it.\n\n::::::::::::::::\n\n::::::::::::::::::::::::::::::::::::::::::::::::::\n\n\n::: {.cell}\n\n:::\n\n\n## Missing data\n\nAs R was designed to analyze datasets, it includes the concept of missing data\n(which is uncommon in other programming languages). Missing data are represented\nin vectors as `NA`.\n\nWhen doing operations on numbers, most functions will return `NA` if the data\nyou are working with include missing values. This feature\nmakes it harder to overlook the cases where you are dealing with missing data.\nYou can add the argument `na.rm = TRUE` to calculate the result as if the missing\nvalues were removed (`rm` stands for ReMoved) first.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nheights <- c(2, 4, 4, NA, 6)\nmean(heights)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] NA\n```\n\n\n:::\n\n```{.r .cell-code}\nmax(heights)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] NA\n```\n\n\n:::\n\n```{.r .cell-code}\nmean(heights, na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4\n```\n\n\n:::\n\n```{.r .cell-code}\nmax(heights, na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 6\n```\n\n\n:::\n:::\n\n\nIf your data include missing values, you may want to become familiar with the\nfunctions `is.na()`, `na.omit()`, and `complete.cases()`. See below for\nexamples.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Extract those elements which are not missing values.\nheights[!is.na(heights)]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2 4 4 6\n```\n\n\n:::\n\n```{.r .cell-code}\n## Returns the object with incomplete cases removed.\n#The returned object is an atomic vector of type `\"numeric\"` (or #`\"double\"`).\nna.omit(heights)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2 4 4 6\nattr(,\"na.action\")\n[1] 4\nattr(,\"class\")\n[1] \"omit\"\n```\n\n\n:::\n\n```{.r .cell-code}\n## Extract those elements which are complete cases.\n#The returned object is an atomic vector of type `\"numeric\"` (or #`\"double\"`).\nheights[complete.cases(heights)]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2 4 4 6\n```\n\n\n:::\n:::\n\n\nRecall that you can use the `typeof()` function to find the type of your atomic vector.\n\n:::::::::::::::::::::::::::::::::::::::  challenge\n\n### Challenge\n\n1. Using this vector of heights in inches, create a new vector, `heights_no_na`, with the NAs removed.\n  \n  ```r\n  heights <- c(63, 69, 60, 65, NA, 68, 61, 70, 61, 59, 64, 69, 63, 63, NA, 72, 65, 64, 70, 63, 65)\n  ```\n\n2. Use the function `median()` to calculate the median of the `heights` vector.\n\n3. Use R to figure out how many people in the set are taller than 67 inches.\n\n:::::::: solution\n\n\n::: {.cell answer='true'}\n\n```{.r .cell-code}\nheights <- c(63, 69, 60, 65, NA, 68, 61, 70, 61, 59, 64, 69, 63, 63, NA, 72, 65, 64, 70, 63, 65)\n\n# 1.\nheights_no_na <- heights[!is.na(heights)]\n# or\nheights_no_na <- na.omit(heights)\n# or\nheights_no_na <- heights[complete.cases(heights)]\n\n# 2.\nmedian(heights, na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 64\n```\n\n\n:::\n\n```{.r .cell-code}\n# 3.\nheights_above_67 <- heights_no_na[heights_no_na > 67]\nlength(heights_above_67)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 6\n```\n\n\n:::\n:::\n\n\n:::::::::::::::::\n\n::::::::::::::::::::::::::::::::::::::::::::::::::\n\n\n::: {.cell}\n\n:::\n\n\nNow that we have learned how to write scripts, and the basics of R's data\nstructures, we are ready to start working with the Portal dataset we have been\nusing in the other lessons, and learn about data frames.\n\n::::::::::::::::::::::::::::::::::::: keypoints\n\n- `<-` is used to assign values on the right to objects on the left\n- Code should be saved within the Source pane in RStudio to help you return to your code later.  \n- '#' can be used to add comments to your code. \n- Functions can automate more complicated sets of commands, and require arguments as inputs.\n- Vectors are composed by a series of values and can take many forms. \n- Data structures in R include 'vector', 'list', 'matrix', 'data.frame', 'factor', and 'array'.\n- Vectors can be subset by indexing or through logical vectors.\n- Many functions exist to remove missing data from data structures. \n\n::::::::::::::::::::::::::::::::::::::::::::::::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}