---
format:
  html:
    code-link: true
  editor_options: 
    chunk_output_type: console
---

##  Worksheet: Introduction to R and Quarto

```{r echo=FALSE, message=FALSE, warning=FALSE, eval=TRUE}
library(tidyverse)
```

### 1. Operators and Functions in R

In order to get familiar with the R language, we shall start by using simple operators and functions that are intuitive to us in our everyday lives.

#### 1.1 Arithmetic operators

```{r echo=TRUE, eval=FALSE}
+                addition
-                subtraction
*                multiplication
/                division
^ or **          power

x %*% y          matrix multiplication c(5, 3) %*% c(2, 4) == 22
x %% y           modulo (x mod y) 5 %% 2 == 1
x %/% y          whole number division: 5 %/% 2 == 2
```

Note that while the first half is self-explanatory, the second is more specific to programming and/or R.


Let's try a few examples in R. First, always have a code chunk at the top that loads the libraries you need:

```{r}
#| echo: fenced
library(tidyverse)
```


Then, copy the following code chunk into your quarto document. 

```{r}
#| eval: false
99 + 1 + -1

64 / 4

64 / (2+2)

64 / 2 + 2
```

Notice the difference in the last two commands and it's effect on the output.

#### 1.2 Logical operators and functions
```{r echo=TRUE, eval=FALSE}
<                less than
<=               less than or equal to
>                greater than
>=               greater than or equal to
==               equal
!=               not equal
!x               not x (negation)
x | y            x OR y
x & y            x AND y
xor(x, y)        exclusive OR (either in x or y, but not in both)
isTRUE(x)        truth test for x
```


Few examples for you to copy in your quarto document or directly on the console,

```{r}
#| eval: false
99 < 1

!(99 < 1)

64 == 8*8

(3 > 2) | (4 > 5)
```

#### 1.3 Numeric functions
```{r echo=TRUE, eval=FALSE}
abs(x)             absolute value
sqrt(x)            square root
ceiling(x)         round up: ceiling(3.475) is 4
floor(x)           round down: floor(3.475) is 3
round(x, digits=n) round: round(3.475, digits=2) is 3.48
cos(x), sin(x), tan(x), acos(x), cosh(x), acosh(x) etc.
log(x)             natural logarithm
log(10, base = n)  base n logarithm
log2(x)            base 2 logarithm
log10(x)           base 10 logarithm
exp(x)             exponential function: e^x
```

Few examples for you to copy in your quarto document or directly on the console,

```{r}
#| eval: false
abs(99)

abs(-99)

sqrt(64)

floor(6.789)
```

#### 1.4 Statistical functions
Below is a list of statistical functions. These functions can have the argument na.rm, which is set to FALSE by default. This will let you deal with missing values (na = not available). If set to false, these are not removed (rm = remove).

```{r echo=TRUE, eval=FALSE}
mean(x, na.rm = FALSE)  mean
sd(x)                   standard deviation
var(x)                  variance

median(x)               median
quantile(x, probs)      quantile of x.  probs: vector of probabilities

sum(x)                  sum
min(x)                  minimal value of x (x_min)
max(x)                  xaximal value of x (x_max)
range(x)                x_min und x_max

# if center  = TRUE: subtract mean
# if scale   = TRUE: divide by sd
scale(x, center = TRUE, scale = TRUE)   center and standardize

# weighted sampling with argument prob:
sample(x, size, replace = FALSE, prob)  sampling with or without replacement. prob: vector of weights
```

#### 1.5 Other useful functions

```{r echo=TRUE, eval=FALSE}
c()                    combine: used to create a vector
seq(from, to, by)      generates a sequence
:                      colon operator: generates a 'regular' sequence in increments of 1
rep(x, times, each)    repeats x
                          times: sequence is repeated n times
                          each: each element is repeated n times

head(x, n = 6)         first 6 elements of x
tail(x, n = 6)         last 6 elements of x
```

Few examples for you to copy in your quarto document or directly on the console,

```{r}
#| eval: false
c(1, 2, 3, 4, 5, 6)

mean(c(1, 2, 3, 4, 5, 6))

mean(c(1, NA, 3, 4, 5, 6), na.rm = TRUE)

mean(c(1, NA, 3, 4, 5, 6), na.rm = FALSE)

sum(c(1, 2, 3, 4, 5, 6))

seq(from = 1, to = 6, by = 1)

seq(from = 1, to = 6, by = 2)

rep(1:6, times = 2, each = 2)
```


Ready to put these new skills to use? Here's an exercise.

### Exercise 1

Write R commands to calculate the following:

1. The sum of your birth day, month and year
2. 250 divided by the product of 4 and 5
3. Half of the sum of 37.5, 51.3, and 101.7
4. $\frac{1}{3} * { (1+3+5+7+2) \over (3+5+4)}$
5. $\sqrt[3]{8}$
6. $\sin\pi$, $\cos\pi$, $\tan\pi$
7. Calculate the 10-based logarithm of 100, and multiply the result with the cosine of pi. Hint: see ?log and ?pi.
8. Calculate the mean, sd and range of the vector [1, 3, 4, 7, 11, 16]
9. Generate the following output: 4 4 4 5 5 5 6 6 6 7 7 7
10. Generate the following output: 2 4 6 8 10 12



### Challenge Exercise 1

Write R commands to evaluate the following:

1. You have 83 chocolates in a bag. You would like to divide them into smaller bags of 8.\
  1.1 How many small bags will you need? \
  1.2 After the bags are filled, how many extra chocolates will you have remaining?
2. You are planning a research study with the following eligibility criteria:
 - Study participant should be between 18-25 years old (variable: age)\
 - Hemoglobin should be over 10 (variable: hgb) \
 - Study participant should not weigh over 50 (variable: wgt) \
 - Study location should be X or Y (variable: loc)
 3. I have the following observations from a clinical parameter –
x <- c(23.1924, 21.4545, 24.6778)
However, I would prefer to limit the values to 1 decimal point. How would you do that?
4. Look up the rnorm() function in the Help Viewer. What arguments does this function take? Any default values?
5. Try to nest a function within another

Assuming you get all the information in forms of the above variables, write an R command to determine eligibility.


### 2. Objects and Vectors in R


#### 2.1 Objects / Variables

So far, we have been happy to run functions and read the results on the screen. What if you'd like to read results later? You will need to save them by creating Objects.

Copy the following code chunk into your quarto document

```{r}
number1 <- 9
sqrt(number1)

number2 <- 10

number1 * number2
```

What do you think happens when you use the same object name to another value? Try it!

```{r echo=TRUE, eval=FALSE}

newnumber <- 100
newnumber <- 150

#What does R pick?
newnumber
```


Object/Variable names

You can choose almost any name you like for an object, as long as the name does not begin with a number or a special character like +, -, *, /, ^, !, @, or &.

```{r echo=TRUE, eval=FALSE}
# good variable names
x_mean
x_sd

num_people
age

# not so good
p
a

# bad variable names
x mean
sd of x

```

#### 2.2 Vectors

Vectors are the fundamental data type in R - all other data types are composed of vectors. 
These can subdivided into:

**numeric vectors**: a further subdivision is into ```integer``` (whole numbers) and ```double``` (floating point numbers).

**character vectors**: these consist of characters strings and are surrounded by quotes, either single ```'``` or double ```"```, e.g. ```'word'``` or ```"word"```.

**logical vectors**: these can take three values: ```TRUE```, ```FALSE``` or ```NA```.

Vectors consist of elements of the same type, i.e., we cannot combine ```logical``` and ```character``` elements in a vector. Vectors have three properties:

Type: ```typeof()```: what is it?
Length: ```length()```: how many elements?
Attribute: ```attributes()```: additional metadata

Vectors are created using the ```c()``` function or by using special function, such as ```seq()``` or ```rep()```.

```{r}
# Numeric vectors
num_vec <- c(2.1,2.2,2.3,2.4,2.5)
length(num_vec)

# Character vectors
char_vec <- c("hello","hi")
length(char_vec)

# Logical vectors
log_vec <- c(TRUE,FALSE,TRUE)
typeof(log_vec)
```

Some fun with vectors

```{r eval=FALSE}
num_vec[1]

num_vec[4]

num_vec[-1]

num_vec[1:3]

num_vec[-c(1, 3)]
```

Try this on your own with the character vectors. What differences and similarities do you notice?

Exercise time!

### Exercise 2
1. Calculate the mean and standard deviation of a numeric vector of the first 6 multiples of 5.
2. What happens if you attempt at arithmetic function on a numeric vector? (Example: num_vec + 1)
3. What happens if you attempt the same on a character vector?
4. Explore the `str_length()` function on a character vector.
5. What happens if you try to make a vector consisting of different data types?
6. Metadata hygiene: Give examples of good and bad ways to make variable names for the following columns in the Metadata spreadsheet –
    - Participant ID
    - Date of Sample Collection
    - Type of Sample
    - Mean of past 3 weights
    - Number of people


### Challenge Exercise 2

1. Calculate the mean of the sum of the first 6 even numbers - using one R command.
2. ```first_name``` and ```last_name``` are two separate variables. Make one variable with both together, calling it ```full_name```. Hint: it is a function 


### 3. Dataframes in R

For data analysis and statistics, data frames are important objects of data representation. A data frame is a two dimensional structure with rows and columns, like a table. You can think of it as a collection of vectors. Let us try making one.

```{r}

# creating a vector with an ID 
id <- c(1, 2, 3)

# creating another vector with names
name <- c("PersonA", "PersonB", "PersonC")

# creating another vector with year of birth 
year_of_birth <- c(1990, 1995, 2000)

# creating another vector with favourite colour
fav_colour <- c("red", "green", "yellow")

#Make a dataframe from the above
df <- tibble(id, name, year_of_birth, fav_colour)

df
```

You just made a dataframe! 

Now, normally you will be importing one and using it to get useful information. You can extract useful information like number of rows, columns, details of each, summary of values, etc

Here are a few helpful functions -

```{r}
attributes(df)
rownames(df)
colnames(df)

# We didn't assign any yet! Let us try to assign column names
colnames(df) <- c("ID","name","year_of_birth","favourite_colour")
colnames(df)

## Note: When importing an existing data file, depending on your it's structure, you can ask R to import with or without row and column names)

nrow(df)
ncol(df)

# Data frame subsetting (I want only a few columns of my interest)
df$name
select(df, year_of_birth)

#extract row 2 only
slice(df, 2)

#extract rows 1, and 3
slice(df, c(1,3))

#extract column 3 only
select(df, 3)

#extract rows based on one condition
filter(df, year_of_birth > 1995)


#extract rows based on multiple conditions
filter(df, year_of_birth > 1995 & df$favourite_colour=="red")
filter(df, year_of_birth > 1995 | df$favourite_colour=="red")

#Note the difference in output upon use of different logical operators AND and OR

```

### Exercise 3

1. Make an expression to get only rows when the name is Person C or the favorite color is green.
2. Make a new dataframe with 6 rows and 5 columns (get creative!)
3. Add different combinations of data to be able to use the above functions and compare output.
4. Try above functions on your new dataframe and note any interesting observations.
5. Try some other functions: ```str()```, ```head()```, ```view()```.

### Challenge Exercise 3

1. Can you think of other simple questions you may need to query your dataset?
2. Try to look your query up on google and see if you can find a function that addresses your need! (add 'in R' at the end for relevant answers!)

Congratulations!
You have successfully reached the end of this exercise. You now possess the most important skill: google your query!