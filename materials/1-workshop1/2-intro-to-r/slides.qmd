---
title: "Intro to R,R Studio, and Quarto"
subtitle: "<em>remixed from <a href='https://github.com/wilkelab/SDS375'>Claus O. Wilke's SDS375 course</a></em> and <a href='https://github.com/posit-conf-2023/quarto-r'> Andrew P. Bray's quarto workshop</a></em>"
format: qmdrslides-revealjs
editor_options: 
  chunk_output_type: inline
---

```{r}
#| echo: false
library(countdown)
library(tidyverse)
library(here)
table_01 <- read_csv(here("datasets/instructional_dataset/01_participant_metadata_UKZN_workshop_2023.csv"))
```

## {data-menu-title="Website Link" style="text-align: center"}

\
\
\

:::{.r-fit-text}
Workshop materials are at:

[https://elsherbini.github.io/durban-data-science-for-biology/](https://elsherbini.github.io/durban-data-science-for-biology/)
:::

## {data-menu-item="Workshop Goals"}

\
\

### Goals for this session {style="font-size: 2.5em; text-align: center"}

:::{.incremental style="font-size: 1.5em"}
1. Answer the question "Why R?"

2. Learn how to use Quarto to make notebook reports.

3. Begin interacting with data in R.
:::

## Discussions: discord

Ask questions at **#workshop-questions** on [https://discord.gg/UDAsYTzZE](https://discord.gg/UDAsYTzZE).

![](images/discord_durban.png){fig-alt="Screenshot of the discord server app that serves as the forum for the workshop." fig-align="center" width="546"}

## Stickies

:::{layout="[[4, 5, 1]]" layout-valign=center}
![](images/sticky.jpeg){fig-alt="Picture of a laptop with a red sticky note stuck to the top." width=540}

During an activity, place a [**blue**]{style="color: DarkTurquoise"}  sticky on your laptop if you're good to go and a [**pink**]{style="color: hotpink"} sticky if you want help.
:::

:::footer
Image by [Megan Duffy](https://dynamicecology.wordpress.com/2015/01/13/sticky-notes-as-a-teaching-and-lab-meeting-tool/)
:::

## Practicalities
:::{.r-fit-text}
WiFi:

Network: CAPRISA-Corp

Password: corp@caprisa17
:::

---

## What is R?

R is a general purpose programming language that's really well suited to statistics, manipulating tabular data, and plotting.



---

## Why R?

![](images/Data_science_venn.svg){fig-alt="Venn diagram showing overlaps of programming, statistics, and communication yielding data science" width=100%}


## Why R?


- R is completely free and open source
- Using R connects you with a community around the whole world
- R has a huge amount of packages - code someone else wrote so you don't have to!

::::: {.columns style='display: flex !important; height: 40%;'}

::: {.column width="10%" style='display: flex; justify-content: center; align-items: center;'}

![](images/Rlogo.svg){fig-alt="R logo"}
:::

::: {.column width="10%" style='display: flex; justify-content: center; align-items: center;'}

![](images/package-hexlogos.svg){fig-alt="hexagonal stickers representing different packages availale in R"}
:::
::::
---


## Obtaining R


Windows, Mac or Linux OS: https://www.r-project.org

![](images/Rlogo.svg){fig-alt="R logo"}
---

## Running R


::: {layout-ncol="2"}
### RStudio
- RStudio: [http://www.rstudio.com](http://www.rstudio.com)
- Built-in tools for viewing plots, tables, and rendering documents
- The best way to work if you only use R

### VSCode
- [https://code.visualstudio.com/download](https://code.visualstudio.com/download)
- not a full IDE, but you can customize it with extensions
- Works well with not just R, but all major programming languages
- Guide on setting up VSCode for R programming: [link](https://renkun.me/2019/12/11/writing-r-in-vscode-a-fresh-start/) and [link](https://renkun.me/2022/03/06/my-recommendations-of-vs-code-extensions-for-r/)
:::
---



## Create an R Project {.your-turn}
::::: {columns}

::: {.column width=20%}

1. File -> New Project...

:::

::: {.column width=75%}

![](images/01-new-project.png)

:::



:::::

## Create an R Project {.your-turn}
::::: {columns}

::: {.column width=20%}

2. Click on New Directory

:::
::: {.column width=75%}
![](images/02-new-directory.png)
:::

:::::

## Create an R Project {.your-turn}
::::: {columns}

::: {.column width=20%}

3. Name your directory and click "Create Project"

:::
::: {.column width=75%}
![](images/03-create-project.png)
:::

:::::
## Create an R Project {.your-turn}

::::: {columns}

::: {.column width=20%}

4. You made a project! This creates a file for you with the `.qmd` extension

:::
::: {.column width=75%}
![](images/04-you-made-a-project.png)
:::

:::::

## Create an R Project {.your-turn}

::::: {columns}

::: {.column width=20%}

5. Switch from "visual" to "source" to see the plain-text version of this document.

:::
::: {.column width=75%}
![](images/05-switch-to-source.png)
:::

:::::

## Create an R Project {.your-turn}

::::: {columns}

::: {.column width=20%}

6. Click on "Render" to ask Quarto to turn this plain-text document into an HTML page

:::
::: {.column width=75%}
![](images/06-render.png)
:::

:::::

## Create an R Project {.your-turn}

::::: {columns}

::: {.column width=20%}

7. Your default web-browser will open and show you the rendered document!

:::
::: {.column width=75%}
![](images/07-rendered.png)
:::

:::::

# RStudio

## What are the parts of RStudio?

## The text editor

![](images/rstudio-text-editor.png)

## The console


![](images/rstudio-text-console-image.png)

## The right panes


![](images/rstudio-text-right_panes.png)


## Let's take a poll {.your-turn}

Go to [the event on wooclap](https://app.wooclap.com/DURBAN?from=event-page)  

![](../../../images/wooclap_info.png)

[M2. Match the areas with the right functionality]{style="font-size: 0.9em"}


# Let's start programming

## What is programming?

Programming is giving the computer instructions using text. The tricky part is learning how to speak to a computer.

:::{layout="[0.25,0.25,0.25]"}
:::{#column1 .fragment}
1. Computers are incredibly literal

```{r}
#| echo: fenced
"a" == "A"
```
:::
:::{#column2 .fragment}
2. Computers care about punctuation

```{r error=TRUE}
#| echo: fenced

max(c(1,2,3,4)]
```
:::
:::{#column3 .fragment}
3. Computers only know what you tell them

```{r error=TRUE}
#| echo: fenced
# how old will I be in 10 years?
my_age + 10

```
:::
:::

[Most bugs happen because of one of these things.]{style="color: red;font-size: 1.2em" .fragment}


## What is programming?

So why bother at all? Because if you can tell a computer how to do it once, it is reproducible!

[If the data changes or you find a mistake, just rerun!]{style="color: green;font-size: 1.2em" .fragment}

[You can run the same code on new data]{style="color: green;font-size: 1.2em" .fragment}

[You can share your code with others so they can start where you left off]{style="color: green;font-size: 1.2em" .fragment}


## Let's use R for math {.your-turn}

```{r}
#| echo: false
countdown::countdown(8)
```

In the console, try typing some commands:

```{r}
#| echo: true
#| eval: false

# arithmetic
3 + 5 + 10
10 * (5 + 1)
3**2 # what does the ** operator do in R?
# check inequalities and equalities
4 >= 1 # what does this mean?
5 + 4 == 9
# make some errors
"3" + 5 # why is this an error?
my_age + 5  # why is this an error?

# write a math expression to calculate what percentage
# of your life has been in post-secondary school/training
# (university, training programs, masters, PhD)
```


## Say hello to the text-editor

When you write code in the console, it is gone.

It is better to work inside quarto notebooks in order to be able to save and share your code and results.

# What can you do with Quarto?


## Articles

::: {layout-ncol="2"}
![](images/gallery-doc-html.png)

![](images/gallery-doc-pdf.png)
:::

## Presentations

::: {layout-ncol="2"}
![](images/gallery-pres-3.png)

![](images/gallery-pres-4.png)
:::

## Websites

::: {layout-ncol="2"}
![](images/gallery-web-nasa.png)

![](images/gallery-web-quarto.png)
:::


## Books

::: {layout-ncol="2"}
![](images/gallery-books-viz.png)

![](images/gallery-books-r4ds.png)
:::

## Quarto Render

**Quarto is integrated into RStudio**

   Click ![](images/render-icon.png){fig-alt="small icon of render arrow" width="100"} in Editor pane of RStudio.

Render input file to various document formats.

::: {layout="[[1, 1, 1, 1]]" style="font-size: .7em; text-align: center"}

### Input

-   `*.qmd`
-   `*.ipynb`
-   `*.md`
-   `*.Rmd`

### Format

-   `html`
-   `pdf`
-   `revealjs` (like these slides!)
-   `docx`
-   `ppt`
-   and many more!

\

\
:::

# Anatomy of a Document

1. Code Cells
2. Text
3. Metadata


# Code Chunks


## Quarto's Code Chunk

::: columns
::: {.column width=25%}
:::

::: {.column width=50%}
    ```{{r}}
    #| echo: false
    rnorm(3)
    ```
:::

::: {.column width=25%}
:::
:::

::: fragment
[**This is a Quarto Code Chunk.**]{style="color: green;font-size: 1.2em"}
:::

## Let's explore the survey data {.our-turn}



## Quarto's Code Chunk {.your-turn}

::: columns
::: {.column width=25%}
:::

::: {.column width=50%}
    ```{{r}}
    #| echo: false
    rnorm(3)
    ```
:::

::: {.column width=25%}
:::
:::


[**This is a Quarto Code Chunk.**]{style="color: green;font-size: 1.2em"}

Make a new code chunk in three ways:

1. Type it out 
2. got to Code -> Insert Chunk on the top menu
3. click in your document and hit the key combination `Alt+Ctrl+i`

Write a math expression in a chunk and press the green arrow at the top-right of the chunk.

## Execution Options

Control how the code is executed with options.  
Options are denoted with the "hash-pipe" `#|`

::: {style="font-size: .8em"}
| Option    | Description                                                                                                                                                                                       |
|------------|------------------------------------------------------------|
| `eval`    | Evaluate the code chunk (if `false`, just echos the code into the output).                                                                                                                        |
| `echo`    | Include the source code in output                                                                                                                                                                 |
| `output`  | Include the results of executing the code in the output (`true`, `false`, or `asis` to indicate that the output is raw markdown and should not have any of Quarto's standard enclosing markdown). |
| `warning` | Include warnings in the output.                                                                                                                                                                   |
| `error`   | Include errors in the output.                                                                                                                                                                     |
| `include` | Catch all for preventing any output (code or results) from being included (e.g. `include: false` suppresses all output from the code block).                                                      |
:::

## Example: Figures from Code {auto-animate=true}

:::columns
:::{.column width=54%}
````markdown
```{{r}}
library(palmerpenguins)
library(ggplot2)

ggplot(penguins,
       aes(x = bill_length_mm,
           y = bill_depth_mm,
           col = island)) +
  geom_point()
```
````
:::
:::{.column width=46% .fragment}
```{r}
#| echo: false
library(palmerpenguins)
library(ggplot2)

ggplot(penguins,
       aes(x = bill_length_mm,
           y = bill_depth_mm,
           col = island)) +
  geom_point() +
  theme_grey(base_size = 18)
```
:::
:::

## Example: Figures from Code {auto-animate=true}

:::columns
:::{.column width=54%}
````markdown
```{{r}}
#| fig-width: 5
#| fig-height: 3

library(palmerpenguins)
library(ggplot2)

ggplot(penguins,
       aes(x = bill_length_mm,
           y = bill_depth_mm,
           col = island)) +
  geom_point()
```
````
:::
:::{.column width=46% .fragment}
```{r}
#| echo: false
#| fig-width: 5
#| fig-height: 3
#| 
library(palmerpenguins)
library(ggplot2)

ggplot(penguins,
       aes(x = bill_length_mm,
           y = bill_depth_mm,
           col = island)) +
  geom_point() +
  theme_grey(base_size = 18)
```
:::
:::


# Text

[The Basics of Markdown]{style="font-family: 'Nanum Myeongjo', serif; font-size:1.7em"}

##  {data-menu-title="Markdown is for writing"}

::: {style="font-size: 4em; text-align: center; color: green"}
{{< fa brands markdown >}}
:::

-   Markdown is designed to be easy to write and easy to read:

    > A Markdown-formatted document should be publishable as-is, as plain text, without looking like it's been marked up with tags or formatting instructions.\
    > -John Gruber

. . .

- Quarto uses extended version of **Pandoc markdown**.
- Pandoc classifies markdown in terms of [Inline]{.inline-el} and [Block]{.block-el} elements.


## [Inline Elements:]{.inline-el} Text Formatting

::: columns
::: {.column width="65%"}
#### Markdown

```{.markdown}
Markdown allows you to format text
with *emphasis* and **strong emphasis**.
You can also add superscripts^2^, 
subscripts~2~, and display code 
`verbatim`. Little known fact: you can 
also ~~strikethrough~~ text and present
it in [small caps]{.smallcaps}.
```
:::

::: {.column width="35%" .fragment}
#### Output

Markdown allows you to format text with *emphasis* and **strong emphasis**. You can also add superscripts^2^, subscripts~2~, and display code `verbatim`. Little known fact: you can also ~~strikethrough~~ text and present it in [small caps]{.smallcaps}.
:::
:::

::: footer
^[Either the `*` or `_` can be used for emphasis and strong.]
:::


## [Inline Elements:]{.inline-el} Links and Images

#### Markdown

```markdown
You can embed [links with names](https://quarto.org/), direct urls
like <https://quarto.org/>, and links to 
[other places](#inline-elements-text-formatting) in the document. 
The syntax is similar for embedding an inline image:
![render icon](images/render-icon.png).
```

\

:::{.fragment}
#### Output

You can embed [links with names](https://quarto.org/), direct urls like <https://quarto.org/>, and links to [other places](#inline-elements-text-formatting) in the document. The syntax is similar for embedding an inline image: ![render icon](images/render-icon.png){fig-alt="small icon of render arrow" width="100"}.
:::

## Markdown can do so much more

To learn about footnotes, Math, tables, and diagrams, check out the [quarto documentation on markdown](https://quarto.org/docs/authoring/markdown-basics.html)


::: columns
::: {.column width="50%" .fragment}
#### Markdown

```markdown
A short note.^[Fits inline.]

|        |  1   |  2   |
|--------|------|------|
| **A**  | 0    | 0    |
: example table {#tbl-1}

$$
f(x)={\sqrt{\frac{\tau}{2\pi}}}
      e^{-\tau (x-\mu )^{2}/2}
$$

```
:::

::: {.column width="50%" .fragment}
#### Output

A short note.^[Fits inline.]

|        |  1   |  2   |
|--------|------|------|
| **A**  | 0    | 0    |
: example table {#tbl-1}

$$
f(x)=\sqrt{\frac{\tau}{2\pi}}
    e^{-\tau (x-\mu )^{2}/2}
$$
:::
:::


## [Metadata:]{.meta-el} YAML

"Yet Another Markup Language" or "YAML Ain't Markup Language" is used to provide document level metadata ...

:::columns

:::{.column width=10%}
:::

:::{.column width=50%}
[... in key-value pairs,]

[... that can nest,]

[... are fussy about indentation,]

[... and are kept between `---`.]

:::

:::{.column width=40% .fragment}

\

``` yaml
---
format: 
  title: "Intro to R"
  author: "Yours Truly"
  html:
    toc: true
    code-fold: true
---
```
:::

:::

[There are many options for [front matter](https://quarto.org/docs/authoring/front-matter.html) and [configuring rendering](https://quarto.org/docs/reference/formats/html.html).]{.fragment}

# Quarto + RStudio  =<br>analysis code, documentation, and interpretation combined.

## Ok, but how do you write code?

## Assignment

You can use `<-` or `=` to assign values to variables

```r
a <- 6
b = 8
c <- 5.44
d = TRUE
e = "hello world" 
e <- 'hello world' # same as double quote
```

We will use `<-` for all examples going forward, but do whichever melts your brain less

## Naming variables

A lot of R people use `.` inside variable names, but in most languages besides R this would be an error. It's good practice these days to use the `_` underscore if you want separation in your variable names. 

```r
r.people.sometimes.put.dots <- TRUE
dots.are.confusing <- "maybe"
just_use_underscores <- "please"
```

## Functions {auto-animate="true"}

Functions are named bits of code that take parameters as input and return some output

```{r}
#| echo: true
library(tidyverse)
word_1 <- "hello"
word_2 <- "world"
str_c(word_1, word_2)
```

`str_c` is a function that puts **c**oncatenates **str**ings. 


## Functions {auto-animate="true"}

Functions are named bits of code that take parameters as input and return some output

```{r}
#| echo: true
library(tidyverse)
word_1 <- "hello"
word_2 <- "world"
str_c(word_1, word_2, sep = " ")
```

`str_c` is a function that puts **c**oncatenates **str**ings. 

functions can have *named parameters* as well as *positional parameters.*  

## Functions {auto-animate="true"}

Functions are named bits of code that take parameters as input and return some output

```{r}
#| echo: true
library(tidyverse)
word_1 <- "hello"
word_2 <- "world"
str_c(word_1, word_2, sep = " ")
```

`str_c` is a function that puts **c**oncatenates **str**ings. 

functions can have *named parameters* as well as *positional parameters.*  
*named parameters* always take an `=` sign for assignment.

## Getting help with functions {auto-animate="true"}

Type ?str_c in the console to get a help page. check out [this guide](https://socviz.co/appendix.html?s=09#a-little-more-about-r) on how to read the R help pages.

also try googling str_c R tidyverse to get help.

chatGPT and phind.com are really good at answering specific questions about R functions - not always correct but most of the time.

## "Everything is a vector" {auto-animate="true"}

This sounds like nonsense - let's unpack:

```{r}
#| echo: true
c(1, 2, 3, 4)
```

1. A Vector is a collection of values surrounded by `c()` and separated with `,`


## "Everything is a vector" {auto-animate="true"}

This sounds like nonsense - let's unpack:

```{r}
#| echo: true
c(1, 2, 3, 4) * 3
```

1. A vector is a collection of values surrounded by `c()` and separated with `,`

2. Vectors in R do smart things with most functions and operations.


## "Everything is a vector" {auto-animate="true"}

This sounds like nonsense - let's unpack:

```{r}
#| echo: true
#| error: true
c(1, 2, 3, "potato") * 3
```

1. A vector is a collection of values surrounded by `c()` and separated with `,`

2. Vectors in R do smart things with most functions and operations.

3. Vectors have only one type of value.

## Value types in R

The type of the value can be 

```r
# numeric
c(1,2,3,4) 

# character
c("a","b","c","d")

# boolean
c(TRUE, FALSE)

# factor
c("Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun") %>% as_factor()
```

## `tibble`s (aka data frames)

`tibble`s are the big reason R is great for working with tabular data.

A data frame is a rectangular collection of variables (in the columns) and observations (in the rows). 

```{r}
#| echo: false
#| message: false
#| warning: false
library(here)
table_02 <- read_csv(here("datasets/instructional_dataset/02_visit_clinical_measurements_UKZN_workshop_2023.csv"))
```

```{r}
#| echo: true 
table_02
```

## Exercise {.your-turn}

That's enough slides for now time to try for yourself! Go to [the module](index.html) and go to the first exercise.

```{r}
countdown::countdown(30)
```



# Elementary data manipulations

:::{.incremental style="font-size: 1.5em"}

- Pick rows: `filter()`

- Pick columns: `select()`

- Sort rows: `arrange()`

- Count things: `count()`

- Make new columns: `mutate()`

:::

## How to read in data?

Data is often in tables, and the easiest way to store tabular data is in `csv` or `tsv` format. 

`csv` - comma separated values    
`tsv` - tab separated values  

to read in data stored this way use `read_csv(filename)` or `read_tsv(filename)`

```r
table_02 <- read_csv("02_visit_clinical_measurements_UKZN_workshop_2023.csv")
```

## But first: the pipe operator `%>%`

## But first: the pipe operator `%>%`

:::{.r-fit-text}

`%>%` is pronounced "and then"

:::

## The pipe `%>%` feeds data into functions {auto-animate=true}


```{r}
#| echo: fenced
head(table_02)
```

## The pipe `%>%` feeds data into functions {auto-animate=true}


```{r}
#| echo: fenced
# head(table_02)
table_02 %>%
  head()
```


## The pipe `%>%` feeds data into functions {auto-animate=true}


```{r}
#| echo: fenced
ggplot(table_02, aes(crp_blood, ph, color = arm)) + geom_point()
```

---

## The pipe `%>%` feeds data into functions {auto-animate=true}


```{r}
#| echo: fenced
table_02 %>%
  ggplot(aes(crp_blood, ph, color = arm)) + geom_point()
```


## Since R 4.1: Native pipe `|>`  {auto-animate=true}

```{r}
#| echo: fenced
table_02 |>
  ggplot(aes(crp_blood, ph, color = arm)) + geom_point()
```

---

## Which to use? Native pipe or old-school pipe?


:::{.incremental style="font-size: 1.5em"}

- `|>` is the future. If you can, use it.

- `%>%` works on older installations. It's the safe choice for now.

We use `%>%` here because many people still run older R versions. Also, we're old school.

:::



# Picking rows or columns, and sorting

## Pick rows from a table: `filter()`


![](images/filter.svg)


## Filter only placebo {auto-animate=true}


```{r}
#| echo: fenced
table_02 %>%
  filter(arm == "placebo")
```


## Filter out samples with ph < 4 {auto-animate=true}


```{r}
#| echo: fenced
table_02 %>%
  filter(ph < 4)
```


## Pick columns from a table: `select()`


![](images/select.svg)


## Pick columns `pid`, `ph`, and `nugent` {auto-animate=true}


```{r}
#| echo: fenced
table_02 %>%
  select(pid, ph, nugent_score)
```


## Rename columns and subset with select {auto-animate=true}


```{r}
#| echo: fenced
table_02 %>%
  select(participant_id = pid, ph, nugent_score)
```



---

## Sort the rows in a table: `arrange()`

![](images/arrange.svg)

---

## Sort samples by ph ascending {auto-animate=true}

```{r}
#| echo: fenced
table_02 %>%
  arrange(ph)
```


---

## Sort samples by ph, descending {auto-animate=true}

```{r}
#| echo: fenced
table_02 %>%
  arrange(desc(ph))
```


## Counting things

To demonstrate counting, let's switch to `table_01`

```{r}
#| echo: fenced
table_01
```

---

## Counting things  {auto-animate=true}


```{r}
#| echo: fenced
table_01 %>%
  count(smoker)
```


## Counting things {auto-animate=true}

```{r}
#| echo: fenced
table_01 %>%
  count(arm, smoker)
```


## Let's take a poll {.your-turn}

Go to [the event on wooclap](https://app.wooclap.com/DURBAN?from=event-page)  

![](../../../images/wooclap_info.png)

[M2. Does filter get rid of rows that match TRUE, or keep rows that match TRUE? ]{style="font-size: 0.9em"}



## Use the pipe to build analysis pipelines {auto-animate=true}

```{r}
#| echo: fenced
table_01 %>%
  filter(arm == "placebo")
```


## Use the pipe to build analysis pipelines {auto-animate=true}


```{r}
#| echo: fenced
table_01 %>%
  filter(age < 30) %>%
  select(pid, arm, smoker)
```

## Use the pipe to build analysis pipelines {auto-animate=true}

```{r}
#| echo: fenced
table_01 %>%
  filter(age < 30) %>%
  select(pid, arm, smoker) %>%
  count(arm, smoker)
```


## Adding new columns to a table

## Make a new table column: `mutate()`

![](images/mutate.svg)


## Example: C-reactive protein {auto-animate=TRUE}

The `crp_blood` column is in units of mg/L. What if you needed it in ug/ul? What's the calculation?


```{r}
#| echo: fenced
table_02 %>%
  select(pid, time_point, crp_blood)
```


## Example: C-reactive protein {auto-animate=TRUE}

The `crp_blood` column is in units of mg/L. What if you needed it in ug/ul? What's the calculation?

To get ug/L you would multiply by 1000. To get ug/ul you need to then divide by 1000000

```{r}
#| echo: fenced
table_02 %>%
  select(pid, time_point, crp_blood)
```



## Example: C-reactive protein {auto-animate=TRUE}

The `crp_blood` column is in units of mg/L. What if you needed it in ug/ul? What's the calculation?

To get ug/L you would multiply by 1000. To get ug/ul you need to then divide by 1000000

```{r}
#| echo: fenced
table_02 %>%
  select(pid, time_point, crp_blood) %>%
  mutate(crp_blood_ugul = crp_blood / 1000)
```



## Make multiple columns at once

```{r}
#| echo: fenced
table_02 %>%
  select(pid, time_point, crp_blood) %>%
  mutate(crp_blood_ugul = crp_blood / 1000,
         crp_blood_ugl = crp_blood * 1000)
```



## Exercise {.your-turn}

That's enough slides for now time to try for yourself! Go to [the module](index.html) and go to the second exercise.

```{r}
countdown::countdown(30)
```

